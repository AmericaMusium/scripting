/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <dodx>
#include <dodfun>
#include <dodconst>
#include <dodstats>
#include <hamsandwich>
#include <fun>

#define PLUGIN "DOD IRON OPTIC"
#define VERSION "1.0"
#define AUTHOR "TONY"

#define m_iFOV 365

#define TE_DOD_EXPLOSION        0x0000000C

#define IsDefaultFOV(%0) (get_member(%0, m_iFOV) == WEAPON_DEFAULT_FOV)

const WEAPON_CROSSHAIR_FOV = 65;
const WEAPON_DEFAULT_FOV = 90;

new const IRONOPTICModel98k[] = "models/red/v_98kIO2.mdl" // ������
new g_scopetest
new const Hudleftsp[] = "sprites/glow03.spr" // SPTIRE
new const g_exp_spr_name[] = "sprites/explosion1.spr" //������ ������4
new gl_iszAllocString_ModelZoom;


new const WEAPON_MODEL_ZOOM[] = "models/red/v_riflesight.mdl";
new exp_sprite
new expl_type = 1
static bytescope = 1

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)


	g_scopetest = get_user_msgid("Scope")	// Add your code here.
	
	
	register_clcmd("say z1", "ironoptic") //������� ��� ��������
	register_clcmd("say z2", "ironoptic2") //������� ��� ��������
	register_clcmd("say 111", "hud_left_sprite") //������� ��� ��������
	register_clcmd("say 222", "hide_ammo_block_change_slots") //������� ��� ��������
	register_clcmd("say 333", "hideweaponfunchui3") //������� ��� ��������
	register_clcmd("say 444", "hud_InitHUD") //������� ��� ��������
	//register_clcmd("say expl", "test_explission") // взрыв TE_EXPL_в точке куда смотрит игрок


	// register_event( "Crosshair", "reg_notice", "be" )
	
	
}

public plugin_precache()
{
	precache_model(IRONOPTICModel98k) //�������� � ������ ������
	precache_model(Hudleftsp) //�������� � ������ ������
	exp_sprite = precache_model( g_exp_spr_name ) 

	engfunc(EngFunc_PrecacheModel, WEAPON_MODEL_ZOOM);
	gl_iszAllocString_ModelZoom = engfunc(EngFunc_AllocString, WEAPON_MODEL_ZOOM);

} 

public ironoptic(id)
{	
	/*
	message_begin(MSG_ONE, get_user_msgid("SetFOV"), {0,0,0}, id)
  	write_byte(100) //Zooming AUG/SIG style
 	message_end()
	set_pdata_int(id,365, 100, 4)
	*/
	/*
	message_begin(MSG_ONE, get_user_msgid("SetFOV"), {0,0,0}, id)
  	write_byte(89) //Zooming AUG/SIG style
 	message_end()
	*/
	/*
	emessage_begin(MSG_ONE_UNRELIABLE, get_user_msgid("CurWeapon"), _, id)
	ewrite_byte(1)
	ewrite_byte(6)
	ewrite_byte(2)
	emessage_end()
	*/
	UTIL_SetUserFOV(id, 65);
	set_pev_string(id, pev_viewmodel2, gl_iszAllocString_ModelZoom);
	// set_pev_string(id, pev_viewmodel, gl_iszAllocString_ModelZoom);

	set_pev(id, pev_viewmodel2, gl_iszAllocString_ModelZoom);
	set_pev(id, pev_viewmodel, gl_iszAllocString_ModelZoom);
	
	/*
		message_begin( MSG_ALL, SVC_TEMPENTITY );
	write_byte( TE_PLAYERATTACHMENT );
	write_byte( id );
	write_coord( 45 );
	write_short( ( get_user_team( id ) == 1 ) ? gTerrSpriteModel : gCounterTerrSpriteModel ); 
	write_short( get_pcvar_num( gCvarSpriteTime ) * 45 );
	message_end( );
	*/



	// поворот V_model
	engfunc(EngFunc_CrosshairAngle, id, random_float(-1.0,1.0), random_float(-100.0,100.0))
	/*
	set_pev(id, pev_viewmodel2, IRONOPTICModel98k)
	set_pev(id, pev_viewmodel, IRONOPTICModel98k)
	#define UNITS_TO_METERS(%1) ((%1) * 0.0254)
	*/

	if(is_user_connected(id) && is_user_alive(id))
	{
	


	//set_pdata_int(id,365, 90, 4)
	// makeFov(id,get_cvar_num("zoom_vint2test"))
	// set_pev(id, pev_viewmodel2, IRONOPTICModel98k)
}
}

public ironoptic2(id)
{
	if(is_user_connected(id) && is_user_alive(id))
	{
	
        set_pdata_int(id, 365, 0, 4)
	
	/*
	entity_set_float(id,EV_FL_framerate,1.5)
	entity_set_int(id,EV_INT_sequence,23)
	entity_set_float(id,EV_FL_framerate,1.5)
	*/

	}
}

public hud_left_sprite(id)
{
	
	message_begin(MSG_ONE,get_user_msgid("Object"),{0,0,0},id)
	write_string("sprites/glow03.spr")
	message_end()

}
public hideweaponfunchui3(id)
{
	

	message_begin(MSG_ONE,g_scopetest,{0,0,0},id)
	write_byte(bytescope)
	message_end()
	
	bytescope = bytescope * 2
	if(bytescope == 512) bytescope = 1
	client_print(id,print_chat, "byte is %d", bytescope)

}

public hide_ammo_block_change_slots(id)
{
	// hide_ammo_block_change_slots
	message_begin(MSG_ONE, get_user_msgid("HideWeapon"),{0,0,0},id)
	write_byte(1)  // 1 = block manual swtich weapon, hide ammo
	message_end()

}

public hud_InitHUD(id)
{
	
	message_begin(MSG_ONE, get_user_msgid("InitHUD"),{0,0,0},id)
	write_byte(true)  // 1 = block manual swtich weapon, hide ammo
	message_end()
}

public reg_notice()
{	
	new arg_line[32]
    read_args(arg_line,31)

	new arg1 =  read_data(1)
	new arg2 =  read_data(2)
	new arg3 =  read_data(3)
	new arg4 =  read_data(4)
	
	client_print(0,print_chat, "Event registered %d %d %d %d " , arg1,arg2,arg3,arg4)
	new i
	for (i = 0 ; i <31; i++)
	{	
		new ii = i 
		new ch = read_data(ii)
		server_print("%d __OF %d", ch, ii)
	}

}

public test_explission(id)
{
	new float: fOriginE[3]
	get_user_origin(id, fOriginE, 3)



	/*
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY) //������� ���������
	write_byte(TE_DOD_BULLET_SPARK) //������ ���������(������)
	engfunc(EngFunc_WriteCoord, fOriginE[0]) //���������� x
	engfunc(EngFunc_WriteCoord, fOriginE[1]) //���������� y
	engfunc(EngFunc_WriteCoord, fOriginE[2] + 30.0) //���������� z
	write_short(exp_sprite) //������ ������� ������
	write_byte(10) //������ �������
	write_byte(15) //�������� ��������
	write_byte(0) //�����
	message_end() //����� ���������
	*/

	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_DOD_EXPLOSION);
	write_coord(1);
	write_coord(1);
	write_coord(30);
	write_byte(30); // Размер взрыва
	write_byte(expl_type); // Тип взрыва
	message_end();

	expl_type++

}


stock UTIL_SetUserFOV(const id, const iFOV = WEAPON_DEFAULT_FOV)
{
	static iMsgID_SetFOV;
	
	if (!iMsgID_SetFOV)
		iMsgID_SetFOV = get_user_msgid("SetFOV");

	message_begin(MSG_ONE, iMsgID_SetFOV, _, id);
	write_byte(iFOV);
	message_end();

	// set_entvar(id, var_fov, iFOV);
	// set_member(id, m_iFOV, iFOV);
}