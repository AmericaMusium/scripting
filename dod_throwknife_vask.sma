/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <hamsandwich>
#include <fakemeta_util>
#include <dodx>
#include <dodfun>
#include <fun>
#include <engine>


#include <amxmisc>



#define PLUGIN "DOD_KNIFENEWDROP Vask"
#define VERSION "1.0"
#define AUTHOR "TheVaskov"
/////////// CAN DELETE WEAPON BOX OR REPLACE MODEL !



new KNIVES_NAMES[3][] = {"weapon_amerknife","weapon_gerknife","weapon_spade"}
new g_mdlspade[] = "models/v_spade.mdl"  // spademodel

new const g_ThrowSound[] = "weapons/knifeswing2.wav"
new const g_ThrowFlySound[] = "weapons/whizz11.wav"
new const g_ThrowHitwallSound[] = "weapons/hit_wood1.wav"
new const g_ThrowHitHumanSound[] = "weapons/hit_grass2.wav"

new KNIVES_MODELS[3][] = {"models/w_amerk.mdl","models/w_paraknife.mdl","models/w_spade.mdl"}
new KNIVESDODW[4] = {DODW_AMERKNIFE, DODW_GERKNIFE, DODW_SPADE, DODW_BRITKNIFE} // Записали индесы всех пистолетов

new gMsgDeathMsg
new g_dropboxclass[33]
new g_msgBloodPuff

// new g_weaponboxidreplace[33]

/*
spade 19
gerknife 2
amerk 1
britk 37
*/ 
public plugin_precache()
{
	precache_model("models/w_spade.mdl")
	precache_model("models/w_paraknife.mdl")
	precache_model("models/w_amerk.mdl")
	precache_sound(g_ThrowSound)
	precache_sound(g_ThrowFlySound)
	precache_sound(g_ThrowHitwallSound)
	precache_sound(g_ThrowHitHumanSound)
	
}


public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	RegisterHam(Ham_Touch,"info_target","flyknife_touch")
	RegisterHam(Ham_DOD_Item_CanDrop,KNIVES_NAMES[0],"func_WeaponDrop")
	RegisterHam(Ham_DOD_Item_CanDrop, KNIVES_NAMES[1], "func_WeaponDrop")
	RegisterHam(Ham_DOD_Item_CanDrop,KNIVES_NAMES[2],"func_WeaponDrop")
	
	//tempentity event - decal applied to world or entity // register event wall sprite
	register_event("23", "weapon_sprite", "a", "1=116", "1=104")
	
	g_msgBloodPuff = get_user_msgid("BloodPuff")
	gMsgDeathMsg = get_user_msgid("DeathMsg")
	
}
//////////// ACCEPT DROP
public func_WeaponDrop(id)
{
	if(is_valid_ent(id))
	{
		
		
		SetHamReturnInteger(1)
		return HAM_SUPERCEDE
	}
	
	return HAM_IGNORED
}
/////////////////////




/// Фиксация кнопки аттаки 2
static bool:g_i_status[33]
public client_connect(i_player)
	g_i_status[i_player]=false

public client_PreThink(i_player){
	
	if(pev(i_player,pev_button)&IN_ATTACK2)
	{
		if(g_i_status[i_player]==false)
		{
			g_i_status[i_player]=true // Игрок  i_player послал +attack2
			
			throw_knife(i_player)
			set_task(0.1, "func_FixMapGuns" ,i_player)
			client_print(i_player,print_chat, "[m2]")
			
			
			PLUGIN_HANDLED;
		}
	}      
	else {
		if(g_i_status[i_player]==true)
		{
			g_i_status[i_player]=false // Игрок i_player послал -attack2
			
		}
	}
}
///////////////////////////////////////////

//////////////////////

///// Выбросить оружие из рук BASE CALL
public throw_knife(id)
{
	
	new knifetype = get_user_weapon(id,_,_)
	g_dropboxclass[id] = knifetype
	
	
	
	if(is_user_alive(id) && knifetype == 1 || knifetype == 2 || knifetype == 19 || knifetype == 37)
	{
		
		client_cmd(id,"drop")
		set_task(0.1, "func_FixMapGuns" ,id)
		// set_task(0.3, "func_FixMapGuns" ,id)
		set_task(0.4, "func_FixMapGuns" ,id)
		
		emit_sound(id,CHAN_BODY,g_ThrowSound,0.9,ATTN_NORM,0,PITCH_NORM)
		
		
		/// START CREATE ENTITY 
		
		
		new flyknife = engfunc(EngFunc_CreateNamedEntity,engfunc(EngFunc_AllocString,"info_target"))
		
		
		if(!flyknife)
			return PLUGIN_HANDLED
		
		new Float:PlayerOrigin[3],Float:velocity[3],Float:f5Angles[3]
		
		//get hand origin
		//engfunc(EngFunc_GetBonePosition,id,20,PlayerOrigin,junk)
		//PlayerOrigin[2] += 12
		
		pev(id,pev_origin,PlayerOrigin)
		PlayerOrigin[2] += 10
		
		velocity_by_aim(id, 1800, velocity)	
		vector_to_angle(velocity, f5Angles)		
		f5Angles[0] += 55.0
		// f5Angles[1] // 
		f5Angles[2] += 90.0
		
		set_pev(flyknife, pev_angles, f5Angles)
		
		
		
		
		set_pev(flyknife,pev_origin,PlayerOrigin)
		set_pev(flyknife, pev_globalname, "damager")
		
		//// modelsets 
		if(knifetype == 1){
			engfunc(EngFunc_SetModel,flyknife,KNIVES_MODELS[0])
			set_pev(flyknife,pev_classname,"weapon_amerknife")
		}
		if(knifetype == 37){
			engfunc(EngFunc_SetModel,flyknife,KNIVES_MODELS[0])
			set_pev(flyknife,pev_classname,"weapon_amerknife")
			g_dropboxclass[id] = 1
		}
		if(knifetype == 2 ){
			engfunc(EngFunc_SetModel,flyknife,KNIVES_MODELS[1])
			set_pev(flyknife,pev_classname,"weapon_gerknife")
		}
		if(knifetype == 19 ){
			engfunc(EngFunc_SetModel,flyknife,KNIVES_MODELS[2])
			set_pev(flyknife,pev_classname,"weapon_spade")
		}
		engfunc(EngFunc_SetSize, flyknife, Float:{-1.0, -1.0, -1.0}, Float:{1.0, 1.0, 1.0})
		
		
		set_pev(flyknife,pev_movetype,MOVETYPE_TOSS)	
		set_pev(flyknife,pev_solid,SOLID_TRIGGER)
		
		// set_pev(grenid,pev_friction,0.65)	
		// set_pev(grenid,pev_gravity,0.45)	
		
		new Float:TumbleVector[3]			
		TumbleVector[0] = random_float(-500.0,-501.0) // = 1320.0  // Wheel
		// TumbleVector[1] // = random_float(800.0,100.0)  // TEA
		TumbleVector[2] = random_float(-60.0,60.0) // 400.0 // = random_float(2.0,0.0) //  HOURS
		
		
		set_pev(flyknife,pev_velocity,velocity)	
		set_pev(flyknife,pev_avelocity,TumbleVector)	
		set_pev(flyknife,pev_owner,id)	
		
		
		// set_pev(flyknife, pev_classname, g_szClassName)  // ???
		
		// new Float:start_delay = get_gametime() + SETTING_DELAYSTART
		// set_pev(grenid,pev_nextthink,start_delay)
		// set_pev(grenid,pev_fuser1,start_delay + SETTING_DURATION)
		
		// set_pev(grenid,pev_iuser1,true)
		
		//////
		
		
		// registr
		
		client_print(id,print_chat, "[M2] WeapID %d NAME", knifetype)
		
		return PLUGIN_HANDLED	
		
	}
}


public flyknife_touch(flyknifeid,touchid)
{
	if(!pev_valid(flyknifeid))
		return HAM_IGNORED
	
	//////////////////// REGISTER  DATA
	new idAttacker = pev(flyknifeid, pev_owner)
	new classname[32] // weapon_spade/knife/gerknife
	pev(flyknifeid, pev_classname,  classname,31)
	new status[32]   // damager or weaponbox
	pev(flyknifeid, pev_globalname, status,31 )
	
	new Float:iOrigin[3]
	new i2Origin[3]
	entity_get_vector(flyknifeid,EV_VEC_origin,iOrigin)
	FVecIVec(iOrigin,i2Origin)
	
	////////////////////
	
	
	//////////////////// HIT WALL OR ENTITY
	if(touchid == 0 || touchid > 32) {
		
		
		
		
		
		message_begin(MSG_PVS,SVC_TEMPENTITY)
		write_byte(TE_SPARKS)
		write_coord(i2Origin[0])
		write_coord(i2Origin[1])
		write_coord(i2Origin[2])
		message_end()
		
		
		
		
		set_pev(flyknifeid, pev_globalname,"nifebox")
		
		//entity_set_edict(flyknifeid, EV_ENT_owner, 0)
		emit_sound(flyknifeid,CHAN_AUTO,g_ThrowHitwallSound,0.4,ATTN_IDLE ,0,PITCH_NORM)
		
		
		///////////////////
	}
	
	//////////////////// ME AS THROWER
	
	
	if(equal(status,"damager") && idAttacker == touchid)
	{
		return FMRES_IGNORED
	}
	///////////
	
	
	
	//////////////////// GIVE AND DELETE PART
	
	if(equal(status,"nifebox") && is_user_alive(touchid)) {
		
		//// найти всех владельцев всех ножей
	
			give_item(touchid, classname) 
			
		
		// client_print(touchid,print_chat, "[weaponsis] %s", weapons12)
		// client_print(touchid,print_chat, "[GIVE] KnifeID %s Status: %s GIVE ITEM", classname, status)
		// remove_entity(flyknifeid)
		
		// ************ if user has melee - plugin handle
	}
	
	
	
	//////////////////// HIT DAMAGE PLAYER OR FRIEND
	if( is_user_connected(touchid) && is_user_alive(touchid)) {
		
		
		if(equal(status,"damager")) {
			
			////////////  FRIENDLY FIRE IGNORER 
			
			if(get_user_team(idAttacker) == get_user_team(touchid)
			|| !is_user_alive(idAttacker) 
			|| !is_user_alive(touchid))
			return FMRES_IGNORED
			//////////// 
			
			user_silentkill(touchid)
			new fragcount = dod_get_user_kills(idAttacker)
			fragcount++
			dod_set_user_kills(idAttacker, fragcount, 1)
			
			message_begin(MSG_PVS,g_msgBloodPuff,{0,0,0},0)
			write_coord(i2Origin[0])
			write_coord(i2Origin[1])
			write_coord(i2Origin[2])
			message_end()
			
			message_begin(MSG_ALL,gMsgDeathMsg,{0,0,0},0)
			write_byte(idAttacker) // killer
			write_byte(touchid) // victim
			write_byte(g_dropboxclass[idAttacker])  // 42 is smash
			message_end()
			
			emit_sound(touchid,CHAN_AUTO,g_ThrowHitHumanSound,0.8,ATTN_IDLE ,0,PITCH_NORM)
			client_print(touchid,print_chat, "[TOUCH] IS NIFE  %s", status)
			set_pev(flyknifeid, pev_globalname,"nifebox")
			
			
		}
		
		
		
		
	}
}

public func_FixMapGuns()
{		
	new ent = -1
	while((ent = find_ent_by_class(ent,"weapon_spade")) != 0) {
		
		new bxclassname[64]
		new bx_owner = entity_get_edict2(ent, EV_ENT_owner )
	
		if(!pev_valid(bx_owner))
		return PLUGIN_HANDLED
		entity_get_string(bx_owner, EV_SZ_classname , bxclassname, 63) // weaponbox
		
		if(equal(bxclassname, "weaponbox")){
			
			// remove_entity(bx_owner)
			/*
			new originbx[3]
			pev(ent, pev_origin, originbx)
			set_pev(bx_owner, pev_origin,originbx)
			set_pev(bx_owner, pev_model, " ")
			*/
			
		}
		
	}
	while((ent = find_ent_by_class(ent,"weapon_amerknife")) != 0) {
		
		new bxclassname[64]
		new bx_owner = entity_get_edict2(ent, EV_ENT_owner )
	
		if(!pev_valid(bx_owner))
		return PLUGIN_HANDLED
		entity_get_string(bx_owner, EV_SZ_classname , bxclassname, 63) // weaponbox
		
		if(equal(bxclassname, "weaponbox")){
			
			remove_entity(bx_owner)
		}
		
	}
	while((ent = find_ent_by_class(ent,"weapon_gerknife")) != 0) {
		
		new bxclassname[64]
		new bx_owner = entity_get_edict2(ent, EV_ENT_owner )
	
		if(!pev_valid(bx_owner))
		return PLUGIN_HANDLED
		entity_get_string(bx_owner, EV_SZ_classname , bxclassname, 63) // weaponbox
		
		if(equal(bxclassname, "weaponbox")){
			
			remove_entity(bx_owner)
		}
		
	}
}

public weapon_sprite()
{
	static Float:origin[3]

	switch (read_data(5)) {
		case 60, 61: {		// is decal scorch1 or 2?
			/*
			read_data(2, origin[0])
			read_data(3, origin[1])
			read_data(4, origin[2])
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
			write_byte(TE_EXPLOSION)
			write_coord(floatround(origin[0]))
			write_coord(floatround(origin[1]))
			write_coord(floatround(origin[2]))
			write_short(g_spriteID)
			write_byte(10)
			write_byte(30)
			write_byte(4)
			message_end()
			*/
		}
		case 54..58: {		// is decal shot1-5?
			read_data(2, origin[0])
			read_data(3, origin[1])
			read_data(4, origin[2])
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
			write_byte(TE_SPARKS)
			write_coord(floatround(origin[0]))
			write_coord(floatround(origin[1]))
			write_coord(floatround(origin[2]))
			message_end()
		}
		default: {
			return
		}
	}	
}

/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1049\\ f0\\ fs16 \n\\ par }
*/
