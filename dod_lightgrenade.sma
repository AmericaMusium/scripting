/* Plugin generated by AMXX-Studio */
////////////////////////////////////////////////////////////////////////////////////////////////////
/*

[B]INFO:[/B]

Make you able to throw light grenades :O. Note the cvar for setting a glow on the grenades, I made
that because this plugin, uses the same grenade model as DoD Smoke Grenades 2, and i want to see 
the difference on them while playing.



[B]CVARS:[/B]
	
- Plugin on /off | 1 is ON -  0 is OFF
dod_light_grenades 1

- Should grenades glow when thrown? | 1 is ON -  0 is OFF
dod_light_grenades_glow 1

- How long should a light grenade light up in seconds?
dod_light_grenades_duration 20

- How big a fuse should light grenades have?
dod_light_grenades_fuse 2

- Max amount of light grenades that may be alive at the same time?
dod_light_grenades_max_alive 10


- Light grenades give at spawn, by class...

* Allies classes
dod_light_grenades_garand 2
dod_light_grenades_carbine 2
dod_light_grenades_thompson 2
dod_light_grenades_grease 2
dod_light_grenades_sniper 0
dod_light_grenades_bar 2
dod_light_grenades_30cal 0
dod_light_grenades_bazooka 1

* Axis classes
dod_light_grenades_kar 2
dod_light_grenades_k43 2
dod_light_grenades_mp40 2
dod_light_grenades_mp44 2
dod_light_grenades_scharfschutze 0
dod_light_grenades_fg42 2
dod_light_grenades_scoped_fg42 0
dod_light_grenades_mg34 0
dod_light_grenades_mg42 0
dod_light_grenades_panzerjager 1

* Brit classes
dod_light_grenades_enfield 2
dod_light_grenades_sten 2
dod_light_grenades_marksman 0
dod_light_grenades_bren 2
dod_light_grenades_piat 1



[B]CONSOLE COMMAND:[/B]

throw_light



[B]THANKS TO:[/B]

tuty @ alliedmodders, his version for CS gave me the idea for this.


[B]CHANGELOG:[/B]

16-05-09
release

17-06-09
removed wpn aim msg. what was i thinking lol

*/
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <amxmodx>
#include <dodx>
#include <fakemeta_util>
#include <hamsandwich>
////////////////////////////////////////////////////////////////////////////////////////////////////
#define LG_ID 666987
////////////////////////////////////////////////////////////////////////////////////////////////////
new const PLUGIN[] = "DoD Light Grenades"
new const VERSION[] = "v1.1 by Dr.G"
new const AUTHOR[] = "AMXX DoD Team"
////////////////////////////////////////////////////////////////////////////////////////////////////
new p_enable, p_duration, p_fuse, p_max, p_glow
new p_garand,p_carbine,p_thompson,p_grease,p_sniper,p_bar,p_30cal,p_bazooka
new p_kar,p_k43,p_mp40,p_mp44,p_scharf,p_fg42,p_scopedfg,p_mg34,p_mg42,p_panzer
new p_enfield,p_sten,p_marksman,p_bren,p_piat
////////////////////////////////////////////////////////////////////////////////////////////////////
new lg_count[33], client_class[33], global_max 
new Float:next_toss[33], Float:is_throwing[33]
////////////////////////////////////////////////////////////////////////////////////////////////////
new const LG_MDL[] = "models/mapmodels/smoke_grenade.mdl"
new const TRIG_SOUND[] = "weapons/weaponempty.wav"
new const THROW_SOUND[] = "weapons/grenthrow.wav"  
////////////////////////////////////////////////////////////////////////////////////////////////////
public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_cvar("dod_light_grenades_stats", VERSION, FCVAR_SERVER | FCVAR_SPONLY)
	
	p_enable = register_cvar("dod_light_grenades", "1" )
	
	p_glow = register_cvar("dod_light_grenades_glow", "1" )
	
	p_duration = register_cvar("dod_light_grenades_duration", "20")
	
	p_fuse = register_cvar("dod_light_grenades_fuse", "2")
	
	p_max = register_cvar("dod_light_grenades_max_alive", "10")
	
	p_garand = register_cvar("dod_light_grenades_garand","2")
	p_carbine = register_cvar("dod_light_grenades_carbine","2")
	p_thompson = register_cvar("dod_light_grenades_thompson","2")
	p_grease = register_cvar("dod_light_grenades_grease","2")
	p_sniper = register_cvar("dod_light_grenades_sniper","0")
	p_bar = register_cvar("dod_light_grenades_bar","2") 
	p_30cal = register_cvar("dod_light_grenades_30cal","0")
	p_bazooka = register_cvar("dod_light_grenades_bazooka","1")
	p_kar = register_cvar("dod_light_grenades_kar","2")
	p_k43 = register_cvar("dod_light_grenades_k43","2")
	p_mp40 = register_cvar("dod_light_grenades_mp40","2")
	p_mp44 = register_cvar("dod_light_grenades_mp44","2")
	p_scharf = register_cvar("dod_light_grenades_scharfschutze","0")
	p_fg42 = register_cvar("dod_light_grenades_fg42","2")
	p_scopedfg = register_cvar("dod_light_grenades_scoped_fg42","0")
	p_mg34 = register_cvar("dod_light_grenades_mg34","0")
	p_mg42 = register_cvar("dod_light_grenades_mg42","0")
	p_panzer = register_cvar("dod_light_grenades_panzerjager","1")
	p_enfield = register_cvar("dod_light_grenades_enfield","2")
	p_sten = register_cvar("dod_light_grenades_sten","2")
	p_marksman = register_cvar("dod_light_grenades_marksman","0")
	p_bren = register_cvar("dod_light_grenades_bren","2")
	p_piat = register_cvar("dod_light_grenades_piat","1")
	
	register_concmd("throw_light", "throw_lg", 0, "- Throw a light grenade...")
	
	register_forward(FM_Think, "func_FMthink")
	
	RegisterHam(Ham_Spawn, "player", "func_HamSpawn", 1)
	
	register_event("RoundState", "cleanup", "a", "1=1")
	register_message(get_user_msgid("HandSignal"),"block_handsignal")
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public plugin_precache()
{
	precache_model(LG_MDL)
	precache_sound(THROW_SOUND)
	precache_sound(TRIG_SOUND)
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public cleanup() 
{
	if(get_pcvar_num(p_enable))
	{
		static round_state ; round_state = read_data(1)
		
		if(round_state == 3 || round_state == 4 || round_state == 5)	
		{
			static iEnt = -1
			
			while((iEnt = fm_find_ent_by_integer(iEnt, pev_iuser4, LG_ID)))
			{
				set_pev(iEnt, pev_flags, FL_KILLME) 
				global_max--
			}
		}
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public dod_client_changeclass(id, class, oldclass)
{
	if(!get_pcvar_num(p_enable) || is_user_bot(id))
		return PLUGIN_CONTINUE
	
	client_class[id] = class
	
	return PLUGIN_CONTINUE
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public func_HamSpawn(id)
{
	if (get_pcvar_num(p_enable) && is_user_alive(id) && !is_user_bot(id))
		set_task(2.0, "manage_permission", id)
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public throw_lg(id)
{
	static Float:gametime ; gametime = get_gametime() ; static button ; button = pev(id,pev_button)
	
	if(!get_pcvar_num(p_enable) || !is_user_alive(id) || button & IN_ATTACK || button & IN_ATTACK2 || gametime < next_toss[id] || !lg_count[id] || (global_max >= get_pcvar_num(p_max)))
		return PLUGIN_HANDLED
	
	is_throwing[id] = gametime + 0.5
	next_toss[id] = gametime + 1.5
	
	emit_sound(id, CHAN_BODY, THROW_SOUND, 0.9, ATTN_NORM, 0, PITCH_NORM)
	
	static Float:iOrigin[3] ; static Float:iTumble[3] ; static Float:iVelocity[3]
	
	pev(id, pev_origin, iOrigin)
	iOrigin[2] += 28
	
	static iEnt ; iEnt = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
	if(!iEnt)
		return PLUGIN_HANDLED
	
	iTumble[1] = random_float(500.0,-500.0)
	
	velocity_by_aim(id, 1000, iVelocity)
	engfunc(EngFunc_SetModel, iEnt, LG_MDL)
	
	set_pev(iEnt, pev_avelocity, iTumble) ; set_pev(iEnt, pev_velocity, iVelocity)
	set_pev(iEnt, pev_origin, iOrigin) ; set_pev(iEnt, pev_solid, SOLID_TRIGGER)
	set_pev(iEnt, pev_movetype, MOVETYPE_TOSS) ; set_pev(iEnt, pev_iuser4, LG_ID)
	set_pev(iEnt, pev_nextthink, gametime + get_pcvar_float(p_duration))
	
	set_task(get_pcvar_float(p_fuse), "light_up", iEnt)
	
	if(get_pcvar_num(p_glow))
		fm_set_rendering(iEnt, kRenderFxGlowShell, 255, 255, 255, kRenderNormal, 18)
	
	lg_count[id]-- ; global_max++
	
	client_print(id, print_chat,"[%s] You have %d light %s left...", PLUGIN, lg_count[id], lg_count[id] != 1 ? "grenades" : "grenade")
	
	return PLUGIN_HANDLED
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public block_handsignal()
{
	static id ; id = get_msg_arg_int(1)
	static Float:gametime1 ; gametime1 = get_gametime()
	
	if(is_throwing[id] > gametime1)
		return PLUGIN_HANDLED
		
	return PLUGIN_CONTINUE
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public light_up(iEnt)
{
	emit_sound(iEnt, CHAN_BODY, TRIG_SOUND, 0.4, ATTN_NORM, 0, PITCH_NORM)
	set_pev(iEnt, pev_effects, EF_BRIGHTLIGHT)
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public func_FMthink(iEnt)
{
	if(get_pcvar_num(p_enable) && pev_valid(iEnt) && pev(iEnt, pev_iuser4) == LG_ID)
	{
		set_pev(iEnt, pev_flags, FL_KILLME) 
		global_max--
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
public manage_permission(id)
{
	switch(client_class[id])
	{
		case DODC_GARAND: lg_count[id] = get_pcvar_num(p_garand) 
			case DODC_CARBINE: lg_count[id] = get_pcvar_num(p_carbine)
			case DODC_THOMPSON: lg_count[id] = get_pcvar_num(p_thompson) 
			case DODC_GREASE: lg_count[id] = get_pcvar_num(p_grease) 
			case DODC_SNIPER: lg_count[id] = get_pcvar_num(p_sniper) 
			case DODC_BAR: lg_count[id] = get_pcvar_num(p_bar) 
			case DODC_30CAL: lg_count[id] = get_pcvar_num(p_30cal) 
			case DODC_BAZOOKA: lg_count[id] = get_pcvar_num(p_bazooka)
			
		case DODC_ENFIELD: lg_count[id] = get_pcvar_num(p_enfield) 
			case DODC_STEN: lg_count[id] = get_pcvar_num(p_sten) 
			case DODC_MARKSMAN: lg_count[id] = get_pcvar_num(p_marksman) 
			case DODC_BREN: lg_count[id] = get_pcvar_num(p_bren) 
			case DODC_PIAT: lg_count[id] = get_pcvar_num(p_piat)
			
		case DODC_KAR: lg_count[id] = get_pcvar_num(p_kar) 
			case DODC_K43: lg_count[id] = get_pcvar_num(p_k43) 
			case DODC_MP40: lg_count[id] = get_pcvar_num(p_mp40) 
			case DODC_MP44: lg_count[id] = get_pcvar_num(p_mp44) 
			case DODC_SCHARFSCHUTZE: lg_count[id] = get_pcvar_num(p_scharf) 
			case DODC_FG42: lg_count[id] = get_pcvar_num(p_fg42) 
			case DODC_SCOPED_FG42: lg_count[id] = get_pcvar_num(p_scopedfg) 
			case DODC_MG34: lg_count[id] = get_pcvar_num(p_mg34) 
			case DODC_MG42: lg_count[id] = get_pcvar_num(p_mg42) 
			case DODC_PANZERJAGER: lg_count[id] = get_pcvar_num(p_panzer)
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
