#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <dodx>
#include <dodfun>
#include <fun>
#include <engine>
#include <okapi>
#include <reapi>



// okapi desc 0x550x8B0xEC0x83
// new const sig[] = {0x55, 0x8B, 0xEC, 0x83} // , 0xEC, 0x10}; –Ω–∞—Ö–æ–¥–∏—Ç

new const sig[] = {0x55, 0x8B, "êåª", "êåª", 0xEC, 0x10};


new const sig_colt_wav[] = {0x68, 0xd8, 0x05 };

new const sig_sccooped_kar[] = {0x55, 0x8B, 0xEC, 0x83, 0xEC}

new okapi_func:func_Test_any

new ptr
// plugin_precache
// plugin_init




public OnPlayerKilled(victim, attacker, damage) 
{
    client_print(0, print_chat, "–ò–≥—Ä–æ–∫ %d —É–±–∏—Ç –∏–≥—Ä–æ–∫–æ–º %d —Å —É—Ä–æ–Ω–æ–º %f!", victim, attacker, damage);
}
public plugin_precache()
{   

    ptr = okapi_mod_find_sig(sig, sizeof(sig));
    server_print("OKAPI :::::: %d", ptr)
    RegisterHookChain( RH_PF_precache_sound_I, "OnPlayerKilled", 1);

    
}


public plugin_init()
{
    //  ?ThinkZoomIn@CBasePlayerWeapon@@QAEXXZ
    new func_Test_any = okapi_build_method(ptr, arg_void, arg_void)
    // c–æ–∑–¥–∞—ë–º —Ö—É–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ On_func_RocketTouch –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏–∏  ?RocketTouch@CBazookaShell@@QAEXPAVCBaseEntity@@@Z
    okapi_add_hook(func_Test_any,"On_func_Test", 1) // 1 = post
    server_print(" getted OKA{I TEST %d", func_Test_any)

    // my_func = okapi_build_function(ptr, arg_cbase, arg_cbase, arg_cbase);
    // new result = okapi_call(my_func, 10, 20);
    // log_amx("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏: %d", result);
    // server_print("OKAPI :::::: %d", result)

    //new okapi_hook:my_hook_handle = okapi_add_hook(my_func, "my_hook");
}

public On_func_Test(idx_weapon)
{   
    server_print("On_TEST %d", idx_weapon)
    if( pev_valid(idx_weapon))
    {
       new classname[32];
        entity_get_string(idx_weapon,EV_SZ_classname,classname,31);
        server_print("On_TEST %s", classname)

    }
    return okapi_ret_supercede
}


/*

–ü—Ä–∏–º–µ—Ä —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é:
new ptr = okapi_mod_get_base_ptr() + 0x1234; // –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞
new value = okapi_get_ptr_int(ptr);
log_amx("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É %d: %d", ptr, value);

okapi_set_ptr_int(ptr, 999);
log_amx("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", okapi_get_ptr_int(ptr));
############

kapi –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ –∏–≥—Ä—ã.
–ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏:
new count = okapi_mod_replace_string("old_string", "new_string");
log_amx("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω: %d", count);
##############

###########
To check if the signature is being searched correctly do:
new offset = okapi_mod_get_ptr_offset(okapi_mod_find_sig(SignA,8))
server_print("offset %x^n",offset) 


#########
okapi_build_function —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –∫–ª–∞—Å—Å–∞.
okapi_build_method —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–ª–µ–Ω–∞–º–∏ –∫–ª–∞—Å—Å–∞.



–ö–æ–≥–¥–∞ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ –º–æ–¥—É–ª—å –∫ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–Ω –∏–∑–º–µ–Ω—è–µ—Ç –±–∞–π—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π.
–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–≤–∞–∂–¥—ã, –≤—Ç–æ—Ä–∞—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –≤ –¥–≤—É—Ö
–ø–ª–∞–≥–∏–Ω–∞—Ö, –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–Ω–æ–º. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤ plugin_precache –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ plugin_init.


###########
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ "êåª" –∏–ª–∏ –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 0xFF –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π.
–°–∏–≥–Ω–∞—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:

–ö–æ–¥:
{0x51,0x56,"êåª","êåª",0x8B,0x86}
{0x51,0x56,0xDEF,0xDEF,0x8B,0x86}
*/