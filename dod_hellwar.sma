/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <fakemeta_util>
#include <fun>
#include <dodx>
#include <dodfun>
#include <hamsandwich>

#define PLUGIN "DOD HELL OF WAR"
#define VERSION "1.0"
#define AUTHOR "[America][TheVaskov]"



new const g_clsnamemills[] = "millsbomb" //Classname ������ entity
new const gentModel[] = "models/w_piat_rocket.mdl" // ������
new const gentSpriteExplode[] = "sprites/explosion1.spr" //������ ������
new const gentSpriteSmoke[] = "sprites/puff.spr" //������ ����

new gent_Sprite[3]
new g_morsmoke 
new g_morsmoke2
new TumbleVector[3]
new g_torus
new g_iFireSprite

new origin[3]


public plugin_precache()
{
	precache_model( gentModel ) //�������� � ������ ������
	gent_Sprite[1] = precache_model( gentSpriteExplode ) //�������� � ������ ������ ������
	gent_Sprite[2] = precache_model( gentSpriteSmoke ) //�������� � ������ ������ ����
	g_morsmoke = precache_model("sprites/smoke_ia.spr")
	g_morsmoke2 = precache_model("sprites/smoke_grenade.spr")
	g_torus =  precache_model("sprites/glow01.spr")
	g_iFireSprite = precache_model("sprites/flame.spr")
	
	precache_sound("weapons/mortar_incoming.wav")
	
} 

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	
	register_clcmd("say bomb", "millsbomb_start")
	// register_touch("millsbomb","*","millsbomb_touch")
	register_forward(FM_Touch,"millsbomb_touch")
	
	register_event("ReloadDone","millsbomb_start","be")
	
	// g_msgReloadDone = get_user_msgid("ReloadDone")
	
	// Add your code here...
}


public millsbomb_start(id){
	
	new indxPls[32] //������� ������ ��� �������� �������� �������
	new idPlayer, indxNum //��� ������ ���-�� ������� � ��������� ������ ������
	new iMillsbomb
	
	TumbleVector[0] = random_float(-300.0,300.0)
	TumbleVector[1] = random_float(-300.0,300.0)
	TumbleVector[2] = random_float(0.0,0.0)
	
	get_players(indxPls, indxNum, "ach") //�������� �������, �������� �������, ����� � hltv
	
	
	for(new i; i < indxNum; i++) //������� ���� �� ���� �������
	{
		idPlayer = indxPls[i] //��� �������� ���������� ��������
		
		new Float:fOriginP[3] //������� ������ ��� float ��������� ������
		pev(idPlayer, pev_origin, fOriginP) //�������� ���������� ������
		
		fOriginP[0] += random_float(-300.0, 300.0)
		fOriginP[1] += random_float(-300.0, 300.0)
		fOriginP[2] += random_float(250.0, 400.0)
		//////////// START CREATE BOMB ENTITY 
		
		if(is_user_connected(idPlayer) && is_user_alive(idPlayer)){
			
			// new i4Entity = engfunc(EngFunc_CreateNamedEntity,engfunc(EngFunc_AllocString,"info_target"))
			
			iMillsbomb = create_entity("info_target")	// ������ ������
			set_pev(iMillsbomb, pev_origin, fOriginP) //����������� ���������� ����� ������	
			set_pev(iMillsbomb, pev_classname, g_clsnamemills) //����������� Classname
			set_pev(iMillsbomb, pev_solid, SOLID_BBOX) //������ ��� ������������
			set_pev(iMillsbomb, pev_movetype, MOVETYPE_TOSS) //�� ������ ��� ��������, �� ������ ������ ����
			set_pev(iMillsbomb, pev_iuser2, 1)
			set_pev(iMillsbomb,pev_velocity,TumbleVector)	
			set_pev(iMillsbomb,pev_avelocity,TumbleVector)
			engfunc(EngFunc_SetModel, iMillsbomb, gentModel) //����������� ������
			engfunc(EngFunc_SetSize, iMillsbomb, Float:{-6.0, -6.0, -3.0}, Float:{6.0, 6.0, 3.0}) //������� ���� ������ entity( ��� ������������� � �� ������ )
			
			
			emit_sound(iMillsbomb,CHAN_WEAPON,"weapons/mortar_incoming.wav",1.0,ATTN_NORM,0,PITCH_HIGH)
			
			
			set_task(0.1, "smoketrail", iMillsbomb)
			set_task(40.0, "millsbomb_del", iMillsbomb)
		}
	}
}

///////////////// SMOKETRAIL UNTIL FLY

public smoketrail(iMillsbomb){
	
	if(pev_valid(iMillsbomb) ){
		
		new status = pev(iMillsbomb, pev_iuser2)
		
		if(status == 1){
			
			new Float:frockOrigin[3]
			// find_ent_by_model(iMillsbomb, "millsbomb", gentModel);
			pev(iMillsbomb, pev_origin, frockOrigin)
			message_begin(MSG_ALL,SVC_TEMPENTITY)
			write_byte(TE_SMOKE)
			engfunc(EngFunc_WriteCoord, frockOrigin[0]) 
			engfunc(EngFunc_WriteCoord, frockOrigin[1]) 
			engfunc(EngFunc_WriteCoord, frockOrigin[2]) 
			write_short(g_morsmoke)
			write_byte(random_num(20,27))
			write_byte(random_num(2,6))
			message_end()
			set_task(0.1, "smoketrail", iMillsbomb)
			
		}
	}
}





//////////////////////////////////////////// TOUCH  

public millsbomb_touch(iMillsbomb,touchid){
	
	
	new mb_cn[32] // weapon_spade/knife/gerknife
	if(pev_valid(iMillsbomb))pev(iMillsbomb, pev_classname,  mb_cn,31)
	new status = pev(iMillsbomb, pev_iuser2)
	if(touchid ==0 && equal(mb_cn,"millsbomb")&& status ==1) {
		///////////////////////////////
		set_pev(iMillsbomb, pev_iuser2, 2)
		new Float:fOriginMB[3] //������� ������ ��� float ��������� ������
		pev(iMillsbomb, pev_origin, fOriginMB) //�������� ���������� ������
		
		
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_WORLDDECAL);
		engfunc(EngFunc_WriteCoord, fOriginMB[0]);
		engfunc(EngFunc_WriteCoord, fOriginMB[1]);
		engfunc(EngFunc_WriteCoord, fOriginMB[2]);
		write_byte(60);
		message_end();
		
		message_begin(MSG_BROADCAST,SVC_TEMPENTITY) //������� ���������
		write_byte(TE_EXPLOSION) //������ ���������(������)
		engfunc(EngFunc_WriteCoord, fOriginMB[0]) //���������� x
		engfunc(EngFunc_WriteCoord, fOriginMB[1]) //���������� y
		engfunc(EngFunc_WriteCoord, fOriginMB[2] + 5.0) //���������� z
		write_short(gent_Sprite[1]) //������ ������� ������
		write_byte(7) //������ �������
		write_byte(20) //�������� ��������
		write_byte(0) //�����
		message_end() //����� ���������
		
		message_begin(MSG_BROADCAST,SVC_TEMPENTITY)//������� ���������
		write_byte(TE_SMOKE) //������ ���������(���)
		engfunc(EngFunc_WriteCoord, fOriginMB[0]) //���������� x
		engfunc(EngFunc_WriteCoord, fOriginMB[1]) //���������� y
		engfunc(EngFunc_WriteCoord, fOriginMB[2] + 20.0) //���������� x
		write_short(gent_Sprite[2]) //������ ������� ����
		write_byte(25) //������ �������
		write_byte(10) //�������� ��������
		message_end() //����� ���������
		
		
		
		origin[0] = floatround(fOriginMB[0])
		origin[1] = floatround(fOriginMB[1])
		origin[2] = floatround(fOriginMB[2])
		
		create_cylinder(origin, 800, g_torus, 0, 0, 15, 150, 10, 150, 150, 150, 45, 0)
		
		// create_cylinder(origin, 550, g_torus, 0, 0, 6, 60, 0, 0, 210, 0, 175, 0)
		//create_cylinder(origin, 700, g_torus, 0, 0, 6, 60, 0, 0, 235, 0, 150, 0)
		//create_cylinder(origin, 850, g_torus, 0, 0, 6, 60, 0, 15, 255, 15, 100, 0)
		
		emit_sound( iMillsbomb, CHAN_WEAPON, "weapons/mortar_incoming.wav", VOL_NORM, ATTN_NORM, SND_STOP, PITCH_NORM )
		/////////// SEARCH VICTIM
		
		new iPlayers[32] //������� ������ ��� �������� �������� �������
		new iPlayer, iNum //��� ������ ���-�� ������� � ��������� ������ ������
		
		get_players(iPlayers, iNum, "ach") //�������� �������, �������� �������, ����� � hltv
		
		set_task(0.4, "make_smoke_MB", iMillsbomb)
		
		for(new i; i < iNum; i++) //������� ���� �� ���� �������
		{
			iPlayer = iPlayers[i] //��� �������� ���������� ��������
			
			new Float:fOriginP[3] //������� ������ ��� float ��������� ������
			pev(iPlayer, pev_origin, fOriginP) //�������� ���������� ������
			
			new Float:fDistance //������� ������ ��� �������� ���������
			fDistance = get_distance_f(fOriginP, fOriginMB) //�������� ��������� ����� ������� � entity
			
			if(fDistance < 100.0 ) //���� ��������� < 300.0
			{	
				//////// code
				
				
				user_kill(iPlayer)
			}
			if(fDistance < 800.0 ) {
				new gmsgShake = get_user_msgid("ScreenShake")
				message_begin(MSG_ONE, gmsgShake, {0,0,0}, iPlayer)
				write_short(255<<14) //ammount
				write_short(10<<10) //lasts this long
				write_short(255<<14) //frequency
				message_end()
				
			}
			// client_print(0, print_chat, "distance is %f" , fDistance )
			PLUGIN_CONTINUE
			
		}
		
		PLUGIN_CONTINUE
		
		
		// remove_entity(iMillsbomb)
	}
	
}
///////////////////////////////////////////////////////////////////////////////////////
// Make Smoke AFTRE EXPLOSSION
//
public make_smoke_MB(iMillsbomb){
	if(pev_valid(iMillsbomb)){
		new status = pev(iMillsbomb, pev_iuser2)
		
		if(status == 2){
			
			new Float:iOriginF[3]
			new iOrigin[3]
			pev(iMillsbomb,pev_origin,iOriginF)
			
			iOrigin[0] = floatround(iOriginF[0])
			iOrigin[1] = floatround(iOriginF[1])
			iOrigin[2] = floatround(iOriginF[2])
			
			
			
			set_task(0.3, "make_smoke_MB", iMillsbomb)
			
			for(new i=0; i < 2; i++)
			{	
				
				iOrigin[0] += random_num(-0, 20)
				iOrigin[1] += random_num(-0, 20)
				iOrigin[2] += random_num(0, 150)
				// Start the message
				message_begin(MSG_BROADCAST, SVC_TEMPENTITY, iOrigin)
				write_byte(TE_SMOKE)
				write_coord(iOrigin[0])
				write_coord(iOrigin[1])
				write_coord(iOrigin[2])
				write_short(g_morsmoke2)
				write_byte(random_num(50,100))
				write_byte(random_num(3,6))
				message_end()
				// End the message
				
				message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
				write_byte(TE_SPRITE);
				write_coord(iOrigin[0]);	// Position
				write_coord(iOrigin[1]);
				write_coord(iOrigin[2]);
				write_short(g_iFireSprite);	// Sprite index
				write_byte(random_num(12,17));		// Scale
				write_byte(random_num(100,150));		// Brightness
				message_end();
				
				
				
				/// rgb(255, 55-100, 0);
				
				
				message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
				write_byte(TE_DLIGHT)
				write_coord(iOrigin[0])
				write_coord(iOrigin[1])
				write_coord(iOrigin[2])
				write_byte(20)
				write_byte(200)
				write_byte(random_num(30, 80))
				write_byte(0)
				write_byte(75)
				write_byte(2)
				message_end()
				
			}
		}
	}
}
public millsbomb_del(iMillsbomb){
	if(pev_valid(iMillsbomb)) remove_entity(iMillsbomb)
}
///////////// 
/*

������� �����  � ������ ������  � ������� ����������
�������� ��� ������� ����� ?

*/



stock create_cylinder(origin[3], addrad, sprite, startfrate, framerate, life, width, amplitude, red, green, blue, brightness, speed)
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMCYLINDER)
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2] + addrad)
	write_short(sprite)
	write_byte(startfrate)
	write_byte(framerate)
	write_byte(life)
	write_byte(width)
	write_byte(amplitude)
	write_byte(red)
	write_byte(green)
	write_byte(blue)
	write_byte(brightness)
	write_byte(speed)
	message_end()
}


public dod_grenade_explosion(id, Float:pos[3], wpnid)
{ 
	
	create_cylinder(pos, 800, g_torus, 0, 0, 15, 150, 10, 150, 150, 150, 45, 0)
	
	
}



