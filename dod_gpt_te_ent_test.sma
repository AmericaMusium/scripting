/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <dodx>
#include <dodfun>
#include <dodconst>
#include <dodstats>
#include <hamsandwich>
#include <fun>

#define TE_DOD_BULLET_HIT       0x0000000A
#define TE_DOD_BULLET_SPARK     0x0000000B
#define TE_DOD_EXPLOSION        0x0000000C



new const Hudleftsp[] = "sprites/glow03.spr" // SPTIRE
new const g_exp_spr_name[] = "sprites/explosion1.spr" //������ ������
new const g_v_sight[] = "models/v_sight.mdl" //������ ������
new exp_sprite
new mat_type = 1
new expl_type = 1


public plugin_init()
{
	register_plugin("TEST TE_EXPL", "0.0", "America")
	register_clcmd("say expl", "test_te_dod_explodsion") // взрыв TE_EXPL_в точке куда смотрит игрок
    register_clcmd("say bhit", "test_te_bullet_hit") 
    register_clcmd("say fizz", "test_te_fizz") 
    // register_clcmd("say visp", "test_visible_point")
	// register_event( "Crosshair", "reg_notice", "be" )


    // RegisterHam(Ham_Think, "player", "HAM_player_THINK2")
    register_think("player", "HAM_player_THINK2");
	
	
}

public plugin_precache()
{
	precache_model(Hudleftsp) //�������� � ������ ������
	exp_sprite = precache_model( g_exp_spr_name ) 
} 

public hud_left_sprite(id)
{
	
	message_begin(MSG_ONE,get_user_msgid("Object"),{0,0,0},id)
	write_string("sprites/glow03.spr")
	message_end()

}


public test_te_dod_explodsion(id)
{
	new float: fOriginE[3]
    new iOrigin[3]
	get_user_origin(id, fOriginE, 3)





	/*
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY) //������� ���������
	write_byte(TE_DOD_BULLET_SPARK) //������ ���������(������)
	engfunc(EngFunc_WriteCoord, fOriginE[0]) //���������� x
	engfunc(EngFunc_WriteCoord, fOriginE[1]) //���������� y
	engfunc(EngFunc_WriteCoord, fOriginE[2] + 30.0) //���������� z
	write_short(exp_sprite) //������ ������� ������
	write_byte(10) //������ �������
	write_byte(15) //�������� ��������
	write_byte(0) //�����
	message_end() //����� ���������
	*/


    // РАБОЧИЙ ИСКРЫ    

	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_DOD_EXPLOSION);
	write_coord(0);
	write_coord(0)
	write_coord(50)
	write_byte(1); // Размер взрыва
	write_byte(1); // Тип взрыва
	message_end();



    // рабочий классический
    message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
    write_byte(TE_EXPLOSION);
    write_coord(0);
    write_coord(0);
    write_coord(200);
    write_short(exp_sprite); // Индекс модели взрыва (0 - без сппрайта слабые искры) exp_sprite
    write_byte(10); // Радиус взрываrf
    write_byte(15); // Сила взрыва
    write_byte(0); 
    message_end();

}

public test_te_bullet_hit(id)
{
    message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
    write_byte(TE_DOD_BULLET_HIT);
    write_coord(0.0);
    write_coord(0.0);
    write_coord(200.0);
    write_coord(0.0);
    write_coord(0.5);
    write_coord(0.5);
    write_byte(mat_type);
    message_end();
    mat_type++
}
public test_te_fizz(id)
{   

    
    message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
    write_byte(TE_FIZZ);
    write_short(id); // Индекс сущности, где будет создан эффект
    write_byte(10); // Размер эффекта
    write_byte(255); // Цвет эффекта (красный)
    write_byte(255); // Цвет эффекта (зеленый)
    write_byte(255); // Цвет эффекта (синий)
    message_end();


}
/*
public test_visible_point(id)
{
    
    static Float:origin[3], Float:view_ofs[3]
    pev(id, pev_origin, origin)
    pev(id, pev_view_ofs, view_ofs)

    static Float:view_pos[3]
    view_pos[0] = origin[0] + view_ofs[0]
    view_pos[1] = origin[1] + view_ofs[1]
    view_pos[2] = origin[2] + view_ofs[2]

    static Float:v_angle[3]
    pev(id, pev_v_angle, v_angle)

    engfunc(EngFunc_MakeVectors, v_angle)

    static Float:v_vector[3]
    global_get(glb_v_forward, v_vector)

    static Float:forward_origin[3]
    forward_origin[0] = view_pos[0] + 35.0 * v_vector[0]
    forward_origin[1] = view_pos[1] + 35.0 * v_vector[1]
    forward_origin[2] = view_pos[2] + 35.0 * v_vector[2]

    //view_pos[] - точка, откуда игрок смотрит
    //forward_origin[] - точка через 35u от взгляда игрока
    new float: v_angles_1[3]
    new float: v_angles_2[3]
    new ent = -1
	while((ent = find_ent_by_class(ent,"weaponbox")) != 0) 
    {
        
        set_pev(ent, pev_origin, forward_origin)
        pev(id, pev_angles, v_angles_1)
        pev(id, pev_v_angle, v_angles_2)
        
        set_pev(ent, pev_angles, v_angles_2)
        // set_pev(ent, pev_light_level, 1)
        // set_pev(ent, pev_effects, EF_BRIGHTFIELD) // мухи золотые
        // set_pev(ent, pev_effects, EF_BRIGHTLIGHT) // мухи DLIGHT от объкт
        // set_pev(ent, pev_effects, EF_DIMLIGHT) // туклый пульсар
        // set_pev(ent, pev_effects, random_num(0, 10))
        //set_pev(ent, pev_rendermode, kRenderGlow)
        //set_pev(ent, pev_renderfx, kRenderFxOutlineObject)
        //set_pev(ent, pev_renderamt, 128)
        
        
    }	     
    // надо сделать синхронный разворот моедли как это сделано у танка,
    //  только с углом. наклоно по лучу игрик
    set_task(0.01, "test_visible_point", id)

}
*/
public HAM_player_THINK2(id)
{
    static Float:origin[3], Float:view_ofs[3]
    pev(id, pev_origin, origin)
    pev(id, pev_view_ofs, view_ofs)

    static Float:view_pos[3]
    view_pos[0] = origin[0] + view_ofs[0]
    view_pos[1] = origin[1] + view_ofs[1]
    view_pos[2] = origin[2] + view_ofs[2]

    static Float:v_angle[3]
    pev(id, pev_v_angle, v_angle)

    engfunc(EngFunc_MakeVectors, v_angle)

    static Float:v_vector[3]
    global_get(glb_v_forward, v_vector)

    static Float:forward_origin[3]
    forward_origin[0] = view_pos[0] + 35.0 * v_vector[0]
    forward_origin[1] = view_pos[1] + 35.0 * v_vector[1]
    forward_origin[2] = view_pos[2] + 35.0 * v_vector[2]

    //view_pos[] - точка, откуда игрок смотрит
    //forward_origin[] - точка через 35u от взгляда игрока
    new float: v_angles_1[3]
    new float: v_angles_2[3]
    new ent = -1
	while((ent = find_ent_by_class(ent,"weaponbox")) != 0) 
    {
        
        set_pev(ent, pev_origin, forward_origin)
        pev(id, pev_angles, v_angles_1)
        pev(id, pev_v_angle, v_angles_2)
        
        set_pev(ent, pev_angles, v_angles_2)
        // set_pev(ent, pev_light_level, 1)
        // set_pev(ent, pev_effects, EF_BRIGHTFIELD) // мухи золотые
        // set_pev(ent, pev_effects, EF_BRIGHTLIGHT) // мухи DLIGHT от объкт
        // set_pev(ent, pev_effects, EF_DIMLIGHT) // туклый пульсар
        // set_pev(ent, pev_effects, random_num(0, 10))
        //set_pev(ent, pev_rendermode, kRenderGlow)
        //set_pev(ent, pev_renderfx, kRenderFxOutlineObject)
        //set_pev(ent, pev_renderamt, 128)
        
        
    }	     
    // надо сделать синхронный разворот моедли как это сделано у танка,
    //  только с углом. наклоно по лучу игрик
    
}
